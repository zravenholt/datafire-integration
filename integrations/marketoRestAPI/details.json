{
  "id": "marketoRestAPI",
  "title": "Marketo Rest API",
  "description": "Marketo Rest API",
  "security": {
    "marketoRestAPI": {
      "integration": "marketoRestAPI",
      "fields": {
        "access_token": "API key"
      }
    }
  },
  "actionCount": 138,
  "definitions": {
    "CreateProgramRequest": {
      "type": "object",
      "required": ["folder"],
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel of the program"
        },
        "costs": {
          "type": "array",
          "description": "Lists of associated period costs",
          "items": {
            "$ref": "#/definitions/CostRequest"
          }
        },
        "description": {
          "type": "string"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the program"
        },
        "tags": {
          "type": "array",
          "description": "List of associated program tags",
          "items": {
            "$ref": "#/definitions/TagRequest"
          }
        },
        "type": {
          "type": "string",
          "description": "Type of the program"
        }
      }
    },
    "UpdateEmailMetaDataRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the Email"
        },
        "operational": {
          "type": "boolean",
          "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
        },
        "published": {
          "type": "boolean",
          "description": "Whether the email has been published to Sales Insight.  Default false"
        },
        "textOnly": {
          "type": "boolean",
          "description": "Setting to include text-only version of email when sent"
        },
        "webView": {
          "type": "boolean",
          "description": "Whether the email has been enabled to allow the 'View as Web Page' when received"
        }
      }
    },
    "BrowseAllPrograms": {
      "type": "object",
      "required": ["channel", "folder", "status", "type"],
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel of the program"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "sfdcId": {
          "type": "string",
          "description": "SFDC id of the program if linked to an SFDC campaign"
        },
        "sfdcName": {
          "type": "string",
          "description": "Name of the linked SFDC campaign if applicable"
        },
        "status": {
          "type": "string",
          "description": "Status of the program.  Only valid for Email and engagement program types.",
          "enum": ["locked", "unlocked", "on", "off"]
        },
        "type": {
          "type": "string",
          "description": "Type of the program",
          "enum": ["program", "event", "webinar", "nurture"]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "CloneEmailTemplateRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the Email Template"
        }
      }
    },
    "CreateEmailTemplateRequest": {
      "type": "object",
      "required": ["name", "folder", "content"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Email Template.  Must be unique under the parent folder."
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the email template"
        },
        "content": {
          "type": "string",
          "description": "HTML content for template.  Multipart file."
        }
      }
    },
    "CloneFormRequest": {
      "type": "object",
      "required": ["name", "folder"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the cloned form"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the cloned form"
        }
      }
    },
    "CloneSnippetRequest": {
      "type": "object",
      "required": ["name", "folder"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the cloned snippet"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the cloned snippet"
        }
      }
    },
    "CloneSmartListRequest": {
      "type": "object",
      "required": ["name", "folder"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the cloned smart list"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the cloned smart list"
        }
      }
    },
    "UpdateEmailTemplateMetaDataRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the Email Template"
        }
      }
    },
    "CloneLandingPageRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the template used"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "ResponseOfLandingPageResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LandingPageResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateProgramRequest": {
      "type": "object",
      "properties": {
        "costs": {
          "type": "array",
          "description": "Lists of associated period costs",
          "items": {
            "$ref": "#/definitions/CostRequest"
          }
        },
        "costsDestructiveUpdate": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the program.  Applicable to event, email, and webinar type programs"
        },
        "name": {
          "type": "string",
          "description": "Name of the program"
        },
        "startDate": {
          "type": "string",
          "description": "Start date of program.  Applicable to event, email and webinar type programs"
        },
        "tags": {
          "type": "array",
          "description": "List of associated program tags",
          "items": {
            "$ref": "#/definitions/TagRequest"
          }
        }
      }
    },
    "FolderContentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "LandingPageDynamicContentResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "description": "List of variations in the section",
          "items": {
            "$ref": "#/definitions/SegmentContent"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the section was created"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the dnamic content section"
        },
        "segmentation": {
          "type": "integer",
          "format": "int32",
          "description": "Segmentation to which the section is linked"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the section was last updated"
        }
      }
    },
    "FileFolder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ResponseOfSegmentsResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SegmentsResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfProgramResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProgramResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CostRequest": {
      "type": "object",
      "required": ["cost", "startDate"],
      "properties": {
        "cost": {
          "type": "integer",
          "format": "int32",
          "description": "Amount of the cost"
        },
        "note": {
          "type": "string",
          "description": "Notes on the cost"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of the period cost"
        }
      }
    },
    "EmailResponse": {
      "type": "object",
      "required": ["folder", "fromEmail", "fromName", "operational", "publishToMSI", "replyEmail", "status", "subject", "template", "textOnly", "webView"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "fromEmail": {
          "type": "string",
          "description": "From-address of the Email"
        },
        "fromName": {
          "type": "string",
          "description": "From-name of the Email"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "operational": {
          "type": "boolean",
          "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
        },
        "publishToMSI": {
          "type": "boolean",
          "description": "Whether the email is published to Marketo Sales Insight"
        },
        "replyEmail": {
          "type": "string",
          "description": "Reply-To address of the Email"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "subject": {
          "type": "string",
          "description": "Subject Line of the Email"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the parent template"
        },
        "textOnly": {
          "type": "boolean",
          "description": "Setting to include text-only version of email when sent"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The type version of the email",
          "enum": [1, 2]
        },
        "webView": {
          "type": "boolean",
          "description": "Whether 'View as Webpage' function is enabled for the email"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "LpTemplateResponse": {
      "type": "object",
      "required": ["enableMunchkin", "folder", "status", "templateType"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "enableMunchkin": {
          "type": "boolean",
          "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "templateType": {
          "type": "string",
          "description": "Type of template to create.  Defaults to freeForm",
          "enum": ["guided", "freeForm"]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "CloneProgramRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the program"
        }
      }
    },
    "CreateFolderRequest": {
      "type": "object",
      "required": ["name", "parent"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the Folder"
        },
        "parent": {
          "description": "Folder object describing the parent folder",
          "$ref": "#/definitions/Folder"
        }
      }
    },
    "UpdateFormFieldRequest": {
      "type": "object",
      "properties": {
        "blankFields": {
          "type": "integer",
          "format": "int32",
          "description": "Number of blank fields to show when progressive profiling is enabled"
        },
        "defaultValue": {
          "type": "string",
          "description": "Optional default value for the field"
        },
        "fieldType": {
          "type": "string",
          "description": "Type of field"
        },
        "fieldWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the input or select element"
        },
        "formPrefill": {
          "type": "boolean",
          "description": "Whether the field should prefill.  Default true"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text for the field"
        },
        "initiallyChecked": {
          "type": "boolean",
          "description": "Whether the field should be checked upon loading.  Default false"
        },
        "instructions": {
          "type": "string",
          "description": "Instructions for the field"
        },
        "label": {
          "type": "string",
          "description": "Label of the field"
        },
        "labelToRight": {
          "type": "boolean",
          "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
        },
        "labelWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the field label element"
        },
        "maskInput": {
          "type": "string",
          "description": "Optional input mask for the field"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum length for text type fields"
        },
        "maxValue": {
          "type": "number",
          "format": "float",
          "description": "Maximum value accepted by the field"
        },
        "minValue": {
          "type": "number",
          "format": "float",
          "description": "Minimum value accepted by the field"
        },
        "multiSelect": {
          "type": "boolean",
          "description": "Whether the field should allow multiple selections. Default false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required to submit the form.  Default false"
        },
        "validationMessage": {
          "type": "string",
          "description": "Validation message to display on failed validation"
        },
        "values": {
          "type": "string",
          "description": "Comma-separated list of accepted values for the field.  Only for select-field types"
        },
        "visibleLines": {
          "type": "integer",
          "format": "int32",
          "description": "Number of lines to display for the field element"
        }
      }
    },
    "SnippetContentResponse": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "content": {
          "type": "string",
          "description": "Content of the snippet"
        },
        "type": {
          "type": "string",
          "description": "Type of snippet content"
        }
      }
    },
    "GetFilesRequest": {
      "type": "object",
      "properties": {
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "order": {
          "type": "string"
        }
      }
    },
    "ResponseOfEmailDynamicContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailDynamicContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FormFieldVisibilityRequest": {
      "type": "object",
      "required": ["ruleType", "rules"],
      "properties": {
        "ruleType": {
          "type": "string",
          "description": "Type of rule to apply",
          "enum": ["show", "alwaysShow", "hide"]
        },
        "rules": {
          "type": "array",
          "description": "JSON Array of rules",
          "items": {
            "$ref": "#/definitions/VisibilityRuleRequest"
          }
        }
      }
    },
    "UpdateFolderRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "isArchive": {
          "type": "boolean",
          "description": "Whether the folder is archived or not.  Toggling this value will change the archival status of the folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the Folder"
        },
        "type": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Folder", "Program"]
        }
      }
    },
    "ResponseOfLpFormFieldResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LpFormFieldResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ThankYouPageResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "thankYouList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormThankYouPageDTO"
          }
        }
      }
    },
    "CreateLandingPageContentRequest": {
      "type": "object",
      "required": ["contentId", "type"],
      "properties": {
        "backgroundColor": {
          "type": "string",
          "description": "background-color property of the HTML section"
        },
        "borderColor": {
          "type": "string",
          "description": "border-color property of the HTML section"
        },
        "borderStyle": {
          "type": "string",
          "description": "border-style property of the HTML section"
        },
        "borderWidth": {
          "type": "string",
          "description": "border-width property of the HTML section"
        },
        "contentId": {
          "type": "string",
          "description": "Id of the content section.  Also the HTML id of the section."
        },
        "height": {
          "type": "string",
          "description": "height property of the HTML section"
        },
        "hideDesktop": {
          "type": "boolean",
          "description": "Hide the section when displayed on a desktop browser.  Default false"
        },
        "hideMobile": {
          "type": "boolean",
          "description": "Hide the section when displayed on a mobile browser.  Default false"
        },
        "imageOpenNewWindow": {
          "type": "string"
        },
        "left": {
          "type": "string",
          "description": "left property of the HTML section"
        },
        "linkUrl": {
          "type": "string",
          "description": "URL parameter of a link type section"
        },
        "opacity": {
          "type": "string",
          "description": "opacity property of the HTML section"
        },
        "top": {
          "type": "string",
          "description": "top property of the HTML section"
        },
        "type": {
          "type": "string",
          "description": "Type of content section",
          "enum": ["Image", "Form", "Rectangle", "Snippet", "RichText", "HTML"]
        },
        "value": {
          "type": "string",
          "description": "Type of content section"
        },
        "width": {
          "type": "string",
          "description": "width property of the HTML section"
        },
        "zIndex": {
          "type": "string",
          "description": "z-index property of the HTML section"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "array": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "containerNode": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "float": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": ["ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING"]
        },
        "null": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "object": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        }
      }
    },
    "EmailContentResponse": {
      "type": "object",
      "required": ["contentType", "htmlId", "value"],
      "properties": {
        "contentType": {
          "type": "string",
          "description": "Type of content to set for the section."
        },
        "htmlId": {
          "type": "string",
          "description": "HTML id of the content section"
        },
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "isLocked": {
          "type": "boolean"
        },
        "parentHtmlId": {
          "type": "string"
        },
        "value": {
          "type": "object",
          "description": "Contents of the section"
        }
      }
    },
    "SnippetResponse": {
      "type": "object",
      "required": ["folder", "status"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "LpFormResponse": {
      "type": "object",
      "required": ["buttonLabel", "buttonLocation", "folder", "fontFamily", "fontSize", "knownVisitor", "labelPosition", "language", "locale", "progressiveProfiling", "status", "thankYouList", "theme", "waitingLabel"],
      "properties": {
        "buttonLabel": {
          "type": "string",
          "description": "Label text of the button"
        },
        "buttonLocation": {
          "type": "integer",
          "format": "int32",
          "description": "Location in pixels of the button relative to the left of the form"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "fontFamily": {
          "type": "string",
          "description": "font-family property for the form"
        },
        "fontSize": {
          "type": "string",
          "description": "font-size property of the form"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "knownVisitor": {
          "description": "Known visitor behavior for the form",
          "$ref": "#/definitions/FormKnownVisitorDTO"
        },
        "labelPosition": {
          "type": "string",
          "description": "Default positioning of labels."
        },
        "language": {
          "type": "string",
          "description": "Language of the form"
        },
        "locale": {
          "type": "string",
          "description": "Locale of the form"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "progressiveProfiling": {
          "type": "boolean",
          "description": "Whether progressive profiling is enabled for the form"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "thankYouList": {
          "type": "array",
          "description": "List of thank you page behaviors for the form",
          "items": {
            "$ref": "#/definitions/FormThankYouPageDTO"
          }
        },
        "theme": {
          "type": "string",
          "description": "CSS theme for the form to use"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "waitingLabel": {
          "type": "string",
          "description": "Waiting text of the button"
        }
      }
    },
    "UpdateLandingPageRequest": {
      "type": "object",
      "properties": {
        "customHeadHTML": {
          "type": "string",
          "description": "Any custom HTML to embed in the <head> tag of the page"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "facebookOgTags": {
          "type": "string",
          "description": "Any OpenGraph meta tags to apply to the page"
        },
        "keywords": {
          "type": "string"
        },
        "metaTagsDescription": {
          "type": "string",
          "description": "Meta description property of the page"
        },
        "mobileEnabled": {
          "type": "boolean",
          "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page"
        },
        "robots": {
          "type": "string",
          "description": "Robots directives to apply to the pages meta tags"
        },
        "styleOverRide": {
          "type": "string",
          "description": "Additional CSS styles to append to the landing page <head>"
        },
        "title": {
          "type": "string",
          "description": "Title element of the landing page"
        },
        "urlPageName": {
          "type": "string",
          "description": "URL path of the page.  Derived from the name field if unset"
        }
      }
    },
    "UpdateFormMetaDataRequest": {
      "type": "object",
      "properties": {
        "customCss": {
          "type": "string",
          "description": "Custom CSS to apply to the form"
        },
        "description": {
          "type": "string",
          "description": "Description of the form"
        },
        "fontFamily": {
          "type": "string",
          "description": "font-family property for the form"
        },
        "fontSize": {
          "type": "string",
          "description": "font-size property of the form"
        },
        "knownVisitor": {
          "description": "Known visitor behavior for the form",
          "$ref": "#/definitions/FormKnownVisitorDTO"
        },
        "labelPosition": {
          "type": "string",
          "description": "Default positioning of labels."
        },
        "language": {
          "type": "string",
          "description": "Language of the form"
        },
        "locale": {
          "type": "string",
          "description": "Locale of the form"
        },
        "name": {
          "type": "string",
          "description": "Name of the form"
        },
        "progressiveProfiling": {
          "type": "boolean",
          "description": "Whether progressive profiling is enabled for the form"
        },
        "theme": {
          "type": "string",
          "description": "CSS theme for the form to use"
        }
      }
    },
    "ResponseOfLandingPageContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LandingPageContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateLandingPageContentRequest": {
      "type": "object",
      "properties": {
        "backgroundColor": {
          "type": "string",
          "description": "background-color property of the HTML section"
        },
        "borderColor": {
          "type": "string",
          "description": "border-color property of the HTML section"
        },
        "borderStyle": {
          "type": "string",
          "description": "border-style property of the HTML section"
        },
        "borderWidth": {
          "type": "string",
          "description": "border-width property of the HTML section"
        },
        "height": {
          "type": "string",
          "description": "height property of the HTML section"
        },
        "hideDesktop": {
          "type": "boolean",
          "description": "Hide the section when displayed on a desktop browser.  Default false"
        },
        "hideMobile": {
          "type": "boolean",
          "description": "Hide the section when displayed on a mobile browser.  Default false"
        },
        "imageOpenNewWindow": {
          "type": "string"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the content section.  Determines the order of the section in the landing page"
        },
        "left": {
          "type": "string",
          "description": "left property of the HTML section"
        },
        "linkUrl": {
          "type": "string",
          "description": "URL parameter of a link type section"
        },
        "opacity": {
          "type": "string",
          "description": "opacity property of the HTML section"
        },
        "top": {
          "type": "string",
          "description": "top property of the HTML section"
        },
        "type": {
          "type": "string",
          "description": "Type of content section",
          "enum": ["Image", "Form", "Rectangle", "Snippet", "RichText", "HTML", "DynamicContent"]
        },
        "value": {
          "type": "string",
          "description": "Type of content section"
        },
        "width": {
          "type": "string",
          "description": "width property of the HTML section"
        },
        "zIndex": {
          "type": "string",
          "description": "z-index property of the HTML section"
        }
      }
    },
    "VisibilityRuleRequest": {
      "type": "object",
      "required": ["operator", "subjectField", "values"],
      "properties": {
        "altLabel": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "description": "Operation to apply to target field.  Evaluated against the list of values when applicable.",
          "enum": ["is", "isNot", "isEmpty", "isNotEmpty", "startsWith", "notStartsWith", "endsWith", "notEndsWith", "contains", "notContains", "greaterThan", "lessThan", "atLeast", "atMost", "between", "notBetween", "notInTimeFrame", "inPast", "notInPast", "after", "before", "inTimeFrame", "onOrAfter", "onOrBefore"]
        },
        "pickListValues": {
          "type": "array",
          "description": "Alternative label to display when rules are applied.",
          "items": {
            "$ref": "#/definitions/PickListDTO"
          }
        },
        "subjectField": {
          "type": "string",
          "description": "Target field id to apply the operation defined by operator to"
        },
        "values": {
          "type": "array",
          "description": "Comma-separated list of values to match against.  Valid for operators 'is', 'isNot', 'startsWith', 'notStartsWith', 'endsWith', 'notEndsWith', 'contains', and 'notContains'",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ModelResponse": {
      "type": "object"
    },
    "ResponseOfLpTemplateGetContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LpTemplateGetContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfLpFormResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LpFormResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfTagResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TagRequest": {
      "type": "object",
      "properties": {
        "tagType": {
          "type": "string",
          "description": "Type of program tag"
        },
        "tagValue": {
          "type": "string",
          "description": "Value of the tag"
        }
      }
    },
    "SegmentContent": {
      "type": "object",
      "required": ["content", "segmentId", "segmentName", "type"],
      "properties": {
        "content": {
          "type": "object",
          "description": "Type of content section"
        },
        "followupType": {
          "type": "string"
        },
        "followupValue": {
          "type": "string"
        },
        "segmentId": {
          "type": "integer",
          "format": "int32",
          "description": "Segmentation to which the section is linked"
        },
        "segmentName": {
          "type": "string",
          "description": "Name of the segment to display content section for"
        },
        "type": {
          "type": "string",
          "description": "Type of content section"
        }
      }
    },
    "ResponseOfFieldsMetaDataResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldsMetaDataResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TokenResponse": {
      "type": "object",
      "required": ["folder"],
      "properties": {
        "folder": {
          "type": "string",
          "example": "{\"id\":1001,\"type\":\"Program\"}",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        },
        "tokens": {
          "type": "array",
          "description": "List of tokens in the folder",
          "items": {
            "$ref": "#/definitions/TokenDTO"
          }
        }
      }
    },
    "CreateEmailRequest": {
      "type": "object",
      "required": ["folder", "fromEmail", "fromName", "name", "replyEmail", "subject", "template"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "fromEmail": {
          "type": "string",
          "description": "From-address of the Email"
        },
        "fromName": {
          "type": "string",
          "description": "From-name of the Email"
        },
        "name": {
          "type": "string",
          "description": "Name of the email"
        },
        "operational": {
          "type": "boolean",
          "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
        },
        "replyEmail": {
          "type": "string",
          "description": "Reply-To address of the Email"
        },
        "subject": {
          "type": "string",
          "description": "Subject Line of the Email"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the parent template"
        },
        "textOnly": {
          "type": "string",
          "description": "Setting to include text-only version of email when sent"
        }
      }
    },
    "EmailHeaderTypeValue": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "EmailTemplateResponse": {
      "type": "object",
      "required": ["folder", "status"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "Template version type",
          "enum": [1, 2]
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "ResponseOfThankYouPageResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThankYouPageResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ChannelResponse": {
      "type": "object",
      "required": ["applicableProgramType", "createdAt", "id", "name", "updatedAt"],
      "properties": {
        "applicableProgramType": {
          "type": "string",
          "description": "Types of programs to which the channel can apply"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the channel was created"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the Channel"
        },
        "name": {
          "type": "string",
          "description": "Name of the Channel"
        },
        "progressionStatuses": {
          "type": "array",
          "description": "List of available statuses for members of programs with the channel",
          "items": {
            "$ref": "#/definitions/ChannelProgression"
          }
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the channel was most recently updated"
        }
      }
    },
    "CreateSnippetRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the snippet"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the snippet"
        }
      }
    },
    "ResponseOfEmailResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfGetEmailFullContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetEmailFullContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfSmartListResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SmartListResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SmartListResponse": {
      "type": "object",
      "required": ["id", "name", "description", "createdAt", "updatedAt", "url", "folder", "workspace"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the smart list"
        },
        "name": {
          "type": "string",
          "description": "Name of the smart list"
        },
        "description": {
          "type": "string",
          "description": "Description of the smart list"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the smart list was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the smart list was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the smart list in the Marketo UI"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "ResponseOfUpdateEmailFullContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateEmailFullContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfobject": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddFormFieldRequest": {
      "type": "object",
      "required": ["fieldId"],
      "properties": {
        "blankFields": {
          "type": "integer",
          "format": "int32",
          "description": "Number of blank fields to show when progressive profiling is enabled"
        },
        "defaultValue": {
          "type": "string",
          "description": "Optional default value for the field"
        },
        "fieldId": {
          "type": "string",
          "description": "Id of the field"
        },
        "fieldType": {
          "type": "string",
          "description": "Type of field"
        },
        "fieldWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the input or select element"
        },
        "formPrefill": {
          "type": "boolean",
          "description": "Whether the field should prefill.  Default true"
        },
        "hintText": {
          "type": "string",
          "description": "Hint text for the field"
        },
        "initiallyChecked": {
          "type": "boolean",
          "description": "Whether the field should be checked upon loading.  Default false"
        },
        "instructions": {
          "type": "string",
          "description": "Instructions for the field"
        },
        "label": {
          "type": "string",
          "description": "Label of the field"
        },
        "labelToRight": {
          "type": "boolean",
          "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
        },
        "labelWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the field label element"
        },
        "maskInput": {
          "type": "string",
          "description": "Optional input mask for the field"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum length for text type fields"
        },
        "maxValue": {
          "type": "number",
          "format": "float",
          "description": "Maximum value accepted by the field"
        },
        "minValue": {
          "type": "number",
          "format": "float",
          "description": "Minimum value accepted by the field"
        },
        "multiSelect": {
          "type": "boolean",
          "description": "Whether the field should allow multiple selections. Default false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the field is required to submit the form.  Default false"
        },
        "validationMessage": {
          "type": "string",
          "description": "Validation message to display on failed validation"
        },
        "values": {
          "type": "string",
          "description": "Comma-separated list of accepted values for the field.  Only for select-field types"
        },
        "visibleLines": {
          "type": "integer",
          "format": "int32",
          "description": "Number of lines to display for the field element"
        }
      }
    },
    "ResponseOfEmailTemplateContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailTemplateContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateLandingPageDynamicContentRequest": {
      "type": "object",
      "properties": {
        "backgroundColor": {
          "type": "string",
          "description": "background-color property of the HTML section"
        },
        "borderColor": {
          "type": "string",
          "description": "border-color property of the HTML section"
        },
        "borderStyle": {
          "type": "string",
          "description": "border-style property of the HTML section"
        },
        "borderWidth": {
          "type": "string",
          "description": "border-width property of the HTML section"
        },
        "height": {
          "type": "string",
          "description": "height property of the HTML section"
        },
        "hideDesktop": {
          "type": "boolean",
          "description": "Hide the section when displayed on a desktop browser.  Default false"
        },
        "hideMobile": {
          "type": "boolean",
          "description": "Hide the section when displayed on a mobile browser.  Default false"
        },
        "imageOpenNewWindow": {
          "type": "string"
        },
        "left": {
          "type": "string",
          "description": "left property of the HTML section"
        },
        "linkUrl": {
          "type": "string",
          "description": "URL parameter of a link type section"
        },
        "opacity": {
          "type": "string",
          "description": "opacity property of the HTML section"
        },
        "segment": {
          "type": "string",
          "description": "Name of the segment to display content section for"
        },
        "top": {
          "type": "string",
          "description": "top property of the HTML section"
        },
        "type": {
          "type": "string",
          "description": "Type of content section"
        },
        "value": {
          "type": "string",
          "description": "Type of content section"
        },
        "width": {
          "type": "string",
          "description": "width property of the HTML section"
        },
        "zIndex": {
          "type": "string",
          "description": "z-index property of the HTML section"
        }
      }
    },
    "ResponseOfSnippetContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SnippetContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateEmailDynamicContentRequest": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "altText": {
          "type": "string",
          "description": "Sets the value of the alt parameter for the resulting img element"
        },
        "externalUrl": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides naitve height of the image.  The resulting file will be resized to the given height"
        },
        "image": {
          "type": "string",
          "description": "Multipart file that allows you to add an image from your computer"
        },
        "linkUrl": {
          "type": "string"
        },
        "overWrite": {
          "type": "boolean",
          "description": "Allows overwriting of the existing image content section"
        },
        "style": {
          "type": "string",
          "description": "Sets the value of the style parameter for the content section"
        },
        "type": {
          "type": "string",
          "description": "Type of content to set for the section.",
          "enum": ["Text", "DynamicContent", "Snippet"]
        },
        "value": {
          "type": "string",
          "description": "Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed"
        },
        "videoUrl": {
          "type": "string",
          "description": "Sets the Url of the video element.  Videos must be either from YouTube or Vimeo"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides native width of the image.  The resulting file will be resized to the given width"
        }
      }
    },
    "AddFormFieldVisibilityRequest": {
      "type": "object",
      "properties": {
        "visibilityRule": {
          "$ref": "#/definitions/FormFieldVisibilityRequest"
        }
      }
    },
    "CreateTokenRequest": {
      "type": "object",
      "required": ["folderType", "name", "type", "value"],
      "properties": {
        "folderType": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Program", "Folder"]
        },
        "name": {
          "type": "string",
          "description": "Name of the token"
        },
        "type": {
          "type": "string",
          "description": "Type of the token"
        },
        "value": {
          "type": "string",
          "description": "Value of the token"
        }
      }
    },
    "ResponseOfLpTemplateResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LpTemplateResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LpTemplateGetContentResponse": {
      "type": "object",
      "required": ["content", "enableMunchkin", "id", "status", "templateType"],
      "properties": {
        "content": {
          "type": "string",
          "description": "HTML content of the landing page template"
        },
        "enableMunchkin": {
          "type": "boolean",
          "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the template"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "templateType": {
          "type": "string",
          "description": "Type of template to create.  Defaults to freeForm",
          "enum": ["guided", "freeForm"]
        }
      }
    },
    "FormVisibilityRuleDTO": {
      "type": "object",
      "properties": {
        "altLabel": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "picklistFilterValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PickListDTO"
          }
        },
        "subjectField": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfLandingPageVariableResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LandingPageVariableResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateLandingPageRequest": {
      "type": "object",
      "required": ["folder", "name", "template"],
      "properties": {
        "customHeadHTML": {
          "type": "string",
          "description": "Any custom HTML to embed in the <head> tag of the page"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "facebookOgTags": {
          "type": "string",
          "description": "Any OpenGraph meta tags to apply to the page"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "keywords": {
          "type": "string"
        },
        "mobileEnabled": {
          "type": "boolean",
          "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page"
        },
        "prefillForm": {
          "type": "boolean",
          "description": "Boolean to toggle whether forms embedded in the page will prefill.  Default false"
        },
        "robots": {
          "type": "string",
          "description": "Robots directives to apply to the pages meta tags"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the template used"
        },
        "title": {
          "type": "string",
          "description": "Title element of the landing page"
        },
        "urlPageName": {
          "type": "string",
          "description": "URL path of the page.  Derived from the name field if unset"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "PickListDTO": {
      "type": "object",
      "properties": {
        "isDefault": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "selected": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SegmentsResponse": {
      "type": "object",
      "required": ["segmentationId"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "segmentationId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the Segmentation"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        }
      }
    },
    "ResponseOfEmailTemplateResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailTemplateResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CreateLpTemplateRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the landing page template"
        },
        "enableMunchkin": {
          "type": "boolean",
          "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page template"
        },
        "templateType": {
          "type": "string",
          "description": "Type of template to create.  Defaults to freeForm",
          "enum": ["guided", "freeForm"]
        }
      }
    },
    "UpdateThankYouPageRequest": {
      "type": "object",
      "properties": {
        "thankyou": {
          "type": "array",
          "description": "JSON array of followup rules",
          "items": {
            "$ref": "#/definitions/ThankYouPageRequest"
          }
        }
      }
    },
    "ProgramResponse": {
      "type": "object",
      "required": ["channel", "costs", "folder", "status", "tags", "type"],
      "properties": {
        "channel": {
          "type": "string",
          "description": "Channel of the program"
        },
        "costs": {
          "type": "array",
          "description": "Lists of associated period costs",
          "items": {
            "$ref": "#/definitions/Costs"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "End date of the program.  Applicable to event, email, and webinar type programs"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "sfdcId": {
          "type": "string",
          "description": "SFDC id of the program if linked to an SFDC campaign"
        },
        "sfdcName": {
          "type": "string",
          "description": "Name of the linked SFDC campaign if applicable"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of program.  Applicable to event, email and webinar type programs"
        },
        "status": {
          "type": "string",
          "description": "Status of the program.  Only valid for Email and engagement program types.",
          "enum": ["locked", "unlocked", "on", "off"]
        },
        "tags": {
          "type": "array",
          "description": "List of associated program tags",
          "items": {
            "$ref": "#/definitions/Tags"
          }
        },
        "type": {
          "type": "string",
          "description": "Type of the program",
          "enum": ["program", "event", "webinar", "nurture"]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "FileResponse": {
      "type": "object",
      "required": ["createdAt", "folder", "id", "mimeType", "name", "size", "updatedAt", "url"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the file was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the file"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/FileFolder"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the file"
        },
        "mimeType": {
          "type": "string",
          "description": "MIME type of the file"
        },
        "name": {
          "type": "string",
          "description": "Name of the file"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "Size of the file in bytes"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the file was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Publically accessible URL of the file"
        }
      }
    },
    "TagResponseGetAll": {
      "type": "object",
      "required": ["applicableProgramTypes", "required", "tagType"],
      "properties": {
        "applicableProgramTypes": {
          "type": "string",
          "description": "Types of programs to which the tag can apply"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the tag is required for its applicable program types"
        },
        "tagType": {
          "type": "string",
          "description": "Name of the tag"
        }
      }
    },
    "ChannelProgression": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the program status"
        },
        "hidden": {
          "type": "boolean",
          "description": "Whether the status has been hidden"
        },
        "name": {
          "type": "string",
          "description": "Name of the status"
        },
        "step": {
          "type": "integer",
          "format": "int32",
          "description": "Step number of the status"
        },
        "success": {
          "type": "boolean",
          "description": "Whether this status is a success step for program members"
        }
      }
    },
    "LandingPageContentResponse": {
      "type": "object",
      "required": ["id", "type"],
      "properties": {
        "content": {
          "type": "object",
          "description": "Content of the section.  Expected values vary based on type.  Image: An image URL.  RichText: HTML Content.  HTML: HTML Content.  Form: A form id.  Rectangle: Empty. Snippet: A snippet id."
        },
        "followupType": {
          "type": "string",
          "description": "Follow-up behavior of a form.  Only available for form-type content sections.  Defaults to form defined behavior.",
          "enum": ["url", "lp", "formDefined"]
        },
        "followupValue": {
          "type": "string",
          "description": "Where to follow-up on form submission.  When followupType is lp, accepts the integer id of a landing page.  For url, it accepts a url string."
        },
        "formattingOptions": {
          "$ref": "#/definitions/JsonNode"
        },
        "id": {
          "type": "object",
          "description": "Id of the content section, may be a string or an int"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the content section.  Index orients the elements from lowest to highest"
        },
        "type": {
          "type": "string",
          "description": "Type of content section",
          "enum": ["Image", "SocialButton", "Form", "DynamicContent", "Rectangle", "Snippet", "RichText", "HTML", "Video", "Poll", "ReferralOffer", "Sweepstakes"]
        }
      }
    },
    "UpdateEmailComponentContentRequest": {
      "type": "object",
      "required": ["type", "value"],
      "properties": {
        "altText": {
          "type": "string",
          "description": "Sets the value of the alt parameter for the resulting img element"
        },
        "externalUrl": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides naitve height of the image.  The resulting file will be resized to the given height"
        },
        "image": {
          "type": "string",
          "description": "Multipart file that allows you to load an image from your computer"
        },
        "linkUrl": {
          "type": "string"
        },
        "overWrite": {
          "type": "boolean",
          "description": "Allows overwriting of the existing image content section"
        },
        "style": {
          "type": "string",
          "description": "Sets the value of the style parameter for the content section"
        },
        "textValue": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Type of content to set for the section.",
          "enum": ["Text", "DynamicContent", "Snippet"]
        },
        "value": {
          "type": "string",
          "description": "Value to set for the section.  For type Text, the HTML content of the section.  For type DynamicContent, the id of the segmentation to use for the content.  For type Snippet, the id of the snippet to embed"
        },
        "videoUrl": {
          "type": "string",
          "description": "Sets the Url of the video element.  Videos must be either from YouTube or Vimeo"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Overrides native width of the image.  The resulting file will be resized to the given width"
        }
      }
    },
    "LandingPageResponse": {
      "type": "object",
      "required": ["customHeadHTML", "facebookOgTags", "robots", "title"],
      "properties": {
        "URL": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "computedUrl": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "customHeadHTML": {
          "type": "string",
          "description": "Any custom HTML to embed in the <head> tag of the page"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "facebookOgTags": {
          "type": "string",
          "description": "Any OpenGraph meta tags to apply to the page"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "formPrefill": {
          "type": "boolean",
          "description": "Boolean to toggle whether forms embedded in the page will prefill.  Default false"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "keywords": {
          "type": "string"
        },
        "mobileEnabled": {
          "type": "boolean",
          "description": "Whether the page has mobile viewing enabled.  Free-form pages only.  Default false"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "robots": {
          "type": "string",
          "description": "Robots directives to apply to the pages meta tags"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "template": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the template used"
        },
        "title": {
          "type": "string",
          "description": "Title element of the landing page"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "ResponseOfFileResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FolderResponse": {
      "type": "object",
      "required": ["createdAt", "folderId", "folderType", "id", "isArchive", "name", "parent", "path", "updatedAt", "url"],
      "properties": {
        "accessZoneId": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the folder was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the folder"
        },
        "folderId": {
          "description": "Id of the folder",
          "$ref": "#/definitions/Folder"
        },
        "folderType": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Folder", "Program"]
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the folder"
        },
        "isArchive": {
          "type": "boolean",
          "description": "Archival status of the folder"
        },
        "isSystem": {
          "type": "boolean",
          "description": "Whether the folder is system-managed"
        },
        "name": {
          "type": "string",
          "description": "Name of the folder.  Not applicable for Programs"
        },
        "parent": {
          "description": "Parent folder reference",
          "$ref": "#/definitions/Folder"
        },
        "path": {
          "type": "string",
          "description": "Path of the folder"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the folder was last updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the folder"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "CreateFileRequest": {
      "type": "object",
      "required": ["file", "folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "file": {
          "type": "string",
          "description": "Multipart file.  Content of the file."
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "insertOnly": {
          "type": "boolean",
          "description": "Whether the calls hould fail if there is already an existing file with the same name"
        },
        "name": {
          "type": "string",
          "description": "Name of the File"
        }
      }
    },
    "UpdateFieldPosition": {
      "type": "object",
      "required": ["columnNumber", "fieldName", "rowNumber"],
      "properties": {
        "columnNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Column number of the field"
        },
        "fieldList": {
          "type": "array",
          "description": "List of positions inside the fields.  Only valid if the target is a fieldset",
          "items": {
            "$ref": "#/definitions/UpdateFieldPosition"
          }
        },
        "fieldName": {
          "type": "string",
          "description": "Id of the field"
        },
        "rowNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Row number of the field"
        }
      }
    },
    "LpFormFieldResponse": {
      "type": "object",
      "properties": {
        "blankFields": {
          "type": "integer",
          "format": "int32"
        },
        "columnNumber": {
          "type": "integer",
          "format": "int32"
        },
        "dataType": {
          "type": "string"
        },
        "defaultValue": {
          "type": "string"
        },
        "fieldMetaData": {
          "type": "object"
        },
        "fieldWidth": {
          "type": "integer",
          "format": "int32"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "formPrefill": {
          "type": "boolean"
        },
        "hintText": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instructions": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "labelWidth": {
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32"
        },
        "required": {
          "type": "boolean"
        },
        "rowNumber": {
          "type": "integer",
          "format": "int32"
        },
        "text": {
          "type": "string"
        },
        "validationMessage": {
          "type": "object"
        },
        "visibilityRules": {
          "$ref": "#/definitions/FormFieldVisibilityRuleResponse"
        }
      }
    },
    "TagResponse": {
      "type": "object",
      "required": ["applicableProgramTypes", "required", "tagType"],
      "properties": {
        "allowableValues": {
          "type": "string",
          "description": "The list of acceptable values for the tag type"
        },
        "applicableProgramTypes": {
          "type": "string",
          "description": "Types of programs to which the tag can apply"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the tag is required for its applicable program types"
        },
        "tagType": {
          "type": "string",
          "description": "Name of the tag"
        }
      }
    },
    "FormVisibilityRuleResponse": {
      "type": "object",
      "properties": {
        "formFieldId": {
          "type": "string"
        },
        "ruleType": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormVisibilityRuleDTO"
          }
        }
      }
    },
    "MultipartFile": {
      "type": "object"
    },
    "ResponseOfTokenResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateLpTemplateRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the landing page template"
        },
        "enableMunchkin": {
          "type": "boolean",
          "description": "Whether to enable munchkin on the derived pages.  Defaults to true"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page template"
        }
      }
    },
    "ResponseOfIdResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateSnippetContentRequest": {
      "type": "object",
      "properties": {
        "content": {
          "type": "object",
          "description": "Content of the snippet"
        },
        "type": {
          "type": "string",
          "description": "Type of snippet content",
          "enum": ["DynamicContent", "HTML", "Text"]
        }
      }
    },
    "CloneEmailRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the new email asset"
        },
        "operational": {
          "type": "boolean",
          "description": "Whether the email is operational.  Operational emails bypass unsubscribe status.  Defaults to false"
        }
      }
    },
    "Tags": {
      "type": "object",
      "required": ["tagType", "tagValue"],
      "properties": {
        "tagType": {
          "type": "string",
          "description": "Name of the tag"
        },
        "tagValue": {
          "type": "string",
          "description": "Value of the tag"
        }
      }
    },
    "UpdateFileContentRequest": {
      "type": "object",
      "required": ["file", "id"],
      "properties": {
        "file": {
          "type": "string",
          "description": "Multipart file. Content of the file."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the file"
        }
      }
    },
    "UpdateEmailFullContentRequest": {
      "type": "object",
      "required": ["content", "id"],
      "properties": {
        "content": {
          "type": "string",
          "description": "Multipart file. File containing HTML document to update with.  File cannot include JavaScript or script tags."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the email"
        }
      }
    },
    "LandingPageVariableResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Integer id of the variable"
        },
        "type": {
          "type": "string",
          "description": "Type of the variable"
        },
        "value": {
          "type": "object",
          "description": "Value of the variable"
        }
      }
    },
    "ResponseOfBrowseAllPrograms": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrowseAllPrograms"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfFolderResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfFolderContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FolderContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfSegmentationResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SegmentationResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FormKnownVisitorDTO": {
      "type": "object",
      "properties": {
        "template": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ResponseOfEmailContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfSnippetResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SnippetResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddFormFieldSetRequest": {
      "type": "object",
      "required": ["label"],
      "properties": {
        "label": {
          "type": "string",
          "description": "Label of the fieldset"
        }
      }
    },
    "IdResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the asset"
        }
      }
    },
    "UpdateSnippetDynamicContentRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of dynamic content section",
          "enum": ["Typeofcontent.Either'HTML'or'Text'"]
        },
        "value": {
          "type": "string",
          "description": "Value of the dynamic content section"
        }
      }
    },
    "EmailDynamicContentResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "array",
          "description": "List of variations in the section",
          "items": {
            "$ref": "#/definitions/EmailDynamicContentItem"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the section was created"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the dnamic content section"
        },
        "segmentation": {
          "type": "integer",
          "format": "int32",
          "description": "Segmentation to which the section is linked"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime when the section was last updated"
        }
      }
    },
    "CloneLpTemplateRequest": {
      "type": "object",
      "required": ["folder", "name"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the landing page template"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "name": {
          "type": "string",
          "description": "Name of the landing page template"
        }
      }
    },
    "SendSampleEmailRequest": {
      "type": "object",
      "required": ["emailAddress"],
      "properties": {
        "emailAddress": {
          "type": "string",
          "description": "Email  address to receive sample email"
        },
        "leadId": {
          "type": "string",
          "description": "Id of a lead to impersonate.  Tokens and dynamic content will be populated as though it were sent to the lead."
        },
        "textOnly": {
          "type": "boolean",
          "description": "Whether to send to text only version along with the HTML version.  Default false."
        }
      }
    },
    "CreateLpFormRequest": {
      "type": "object",
      "required": ["folder"],
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the form"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "fontFamily": {
          "type": "string",
          "description": "font-family property for the form"
        },
        "fontSize": {
          "type": "string",
          "description": "font-size property of the form"
        },
        "knownVisitor": {
          "description": "Known visitor behavior for the form",
          "$ref": "#/definitions/FormKnownVisitorDTO"
        },
        "labelPosition": {
          "type": "string",
          "description": "Default positioning of labels."
        },
        "language": {
          "type": "string",
          "description": "Language of the form"
        },
        "locale": {
          "type": "string",
          "description": "Locale of the form"
        },
        "name": {
          "type": "string",
          "description": "Name of the form"
        },
        "progressiveProfiling": {
          "type": "boolean",
          "description": "Whether progressive profiling is enabled for the form"
        },
        "theme": {
          "type": "string",
          "description": "CSS theme for the form to use"
        }
      }
    },
    "Costs": {
      "type": "object",
      "required": ["cost", "startDate"],
      "properties": {
        "cost": {
          "type": "integer",
          "format": "int32",
          "description": "Amount of the cost"
        },
        "note": {
          "type": "string",
          "description": "Notes on the cost"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Start date of the period cost"
        }
      }
    },
    "FormFieldVisibilityRuleResponse": {
      "type": "object",
      "properties": {
        "ruleType": {
          "type": "string"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormVisibilityRuleDTO"
          }
        }
      }
    },
    "TokenDTO": {
      "type": "object",
      "properties": {
        "computedUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ThankYouPageRequest": {
      "type": "object",
      "required": ["followupType", "followupValue", "operator", "subjectField", "values"],
      "properties": {
        "default": {
          "type": "boolean",
          "description": "When true, this is the default rule, and will be applied when a user does not qualify for any of the other rules"
        },
        "followupType": {
          "type": "string",
          "description": "Type of followup.  When set to url, will follow to the url set in followupValue.  When set to lp, will follow to the Landing page with the id given in followupValue"
        },
        "followupValue": {
          "type": "string",
          "description": "Where to follow to on submission.  Given as a URL or and Integer depending on followupType"
        },
        "operator": {
          "type": "string",
          "description": "Operator to evaluate aginst the subject field"
        },
        "subjectField": {
          "type": "string",
          "description": "Field to apply to operator to"
        },
        "values": {
          "type": "array",
          "description": "Comma-separated list of values to compare to with the operator",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FormThankYouPageDTO": {
      "type": "object",
      "properties": {
        "default": {
          "type": "boolean"
        },
        "followupType": {
          "type": "string"
        },
        "followupValue": {
          "type": "object"
        },
        "operator": {
          "type": "string"
        },
        "subjectField": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseOfFormVisibilityRuleResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormVisibilityRuleResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EmailDynamicContentItem": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "segmentId": {
          "type": "string"
        },
        "segmentName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ResponseOfLandingPageDynamicContentResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LandingPageDynamicContentResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddRichTextRequest": {
      "type": "object",
      "required": ["text"],
      "properties": {
        "text": {
          "type": "string",
          "description": "Multipart file. HTML Content for the rich text field."
        }
      }
    },
    "Folder": {
      "type": "object",
      "required": ["id", "type"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the folder"
        },
        "type": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Folder", "Program"]
        }
      },
      "description": "JSON representation of a folder"
    },
    "EmailTemplateContentResponse": {
      "type": "object",
      "required": ["content", "id", "status"],
      "properties": {
        "content": {
          "type": "string",
          "description": "HTML content of the template"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the email template"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      }
    },
    "GetEmailFullContentResponse": {
      "type": "object",
      "required": ["content", "id", "status"],
      "properties": {
        "content": {
          "type": "string",
          "description": "HTML content of the email"
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the email"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      }
    },
    "UpdateEmailFullContentResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique integer id of the email"
        }
      }
    },
    "ResponseOfChannelResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChannelResponse"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SegmentationResponse": {
      "type": "object",
      "required": ["folder", "status"],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was created"
        },
        "description": {
          "type": "string",
          "description": "Description of the asset"
        },
        "folder": {
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'",
          "$ref": "#/definitions/Folder"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the asset"
        },
        "name": {
          "type": "string",
          "description": "Name of the asset"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Datetime the asset was most recently updated"
        },
        "url": {
          "type": "string",
          "description": "Url of the asset in the Marketo UI"
        },
        "workspace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      }
    },
    "GetTagByNameRequest": {
      "type": "object",
      "properties": {
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "name": {
          "type": "string"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "order": {
          "type": "string"
        }
      }
    },
    "ResponseOfTagResponseGetAll": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "requestId": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagResponseGetAll"
          }
        },
        "success": {
          "type": "boolean"
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReArrangeRequest": {
      "type": "object",
      "properties": {
        "positions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateFieldPosition"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "SubmitButtonRequest": {
      "type": "object",
      "properties": {
        "buttonPosition": {
          "type": "integer",
          "format": "int32",
          "description": "Location in pixels of the button relative to the left of the form"
        },
        "buttonStyle": {
          "type": "string",
          "description": "Style of the button"
        },
        "label": {
          "type": "string",
          "description": "Label text of the button"
        },
        "waitingLabel": {
          "type": "string",
          "description": "Waiting text of the button"
        }
      }
    },
    "UpdateSnippetRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the snippet"
        },
        "isArchive": {
          "type": "string",
          "description": "Archival status of the snippet"
        },
        "name": {
          "type": "string",
          "description": "Name of the snippet"
        }
      }
    },
    "FieldsMetaDataResponse": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "dataType": {
          "type": "string",
          "description": "Type of field"
        },
        "defaultValue": {
          "type": "string",
          "description": "Optional default value for the field"
        },
        "description": {
          "type": "string",
          "description": "Description of the field"
        },
        "fieldMaskValues": {
          "type": "string",
          "description": "Optional input mask for the field"
        },
        "fieldWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the input or select element"
        },
        "id": {
          "type": "string",
          "description": "Id of the field"
        },
        "initiallyChecked": {
          "type": "boolean",
          "description": "Whether the field should be checked upon loading.  Default false"
        },
        "isLabelToRight": {
          "type": "boolean",
          "description": "Whether the field label should be displayed to the right of the input/select element. Default false"
        },
        "isMultiselect": {
          "type": "boolean",
          "description": "Whether the field should allow multiple selections. Default false"
        },
        "isRequired": {
          "type": "boolean",
          "description": "Whether the field is required to submit the form.  Default false"
        },
        "labelWidth": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the field label element"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum length for text type fields"
        },
        "maximumNumber": {
          "type": "number",
          "format": "float",
          "description": "Maximum value accepted by the field"
        },
        "minimumNumber": {
          "type": "number",
          "format": "float",
          "description": "Minimum value accepted by the field"
        },
        "picklistValues": {
          "type": "string",
          "description": "Comma-separated list of available picklist values for the field"
        },
        "placeholderText": {
          "type": "string",
          "description": "Placeholder text for the field"
        },
        "validationMessage": {
          "type": "string",
          "description": "Validation message to display on failed validation"
        },
        "visibleRows": {
          "type": "integer",
          "format": "int32",
          "description": "Number of rows visible for progressive profiling"
        }
      }
    },
    "DeleteTokenRequest": {
      "type": "object",
      "properties": {
        "folderType": {
          "type": "string",
          "enum": ["Program", "Folder"]
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "UpdateVariableRequest": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value to update variable with"
        },
        "moduleId": {
          "type": "string",
          "description": "Module that variable is associated with. Required for updating module variables. Not needed for global variables."
        }
      }
    },
    "UpdateEmailTemplateContentRequest": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "Content for the email template.  Multipart file."
        }
      }
    },
    "UpdateEmailComponentDataRequest": {
      "type": "object",
      "properties": {
        "fromEmail": {
          "description": "From-address of the Email",
          "$ref": "#/definitions/EmailHeaderTypeValue"
        },
        "fromName": {
          "description": "From-name of the Email",
          "$ref": "#/definitions/EmailHeaderTypeValue"
        },
        "replyTO": {
          "description": "Reply-To address of the Email",
          "$ref": "#/definitions/EmailHeaderTypeValue"
        },
        "subject": {
          "description": "Subject Line of the Email",
          "$ref": "#/definitions/EmailHeaderTypeValue"
        }
      }
    }
  },
  "actions": [{
    "id": "getChannelByNameUsingGET",
    "title": "getChannelByNameUsingGET",
    "description": "Retrieves channels based on the provided name. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name of channel to retrieve"
        }
      },
      "additionalProperties": false,
      "required": ["Name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfChannelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getAllChannelsUsingGET",
    "title": "getAllChannelsUsingGET",
    "description": "Retrieves all channels. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfChannelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getEmailByNameUsingGET",
    "title": "getEmailByNameUsingGET",
    "description": "Returns an email records based on the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the email"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "folder": {
          "type": "string",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        }
      },
      "additionalProperties": false,
      "required": ["name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getEmailByIdUsingGET",
    "title": "getEmailByIdUsingGET",
    "description": "Returns an email records by its id.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateEmailUsingPOST",
    "title": "updateEmailUsingPOST",
    "description": "Updates the metadata of an email asset.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateEmailRequest": {
          "$ref": "#/definitions/UpdateEmailMetaDataRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateEmailRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "approveDraftUsingPOST",
    "title": "approveDraftUsingPOST",
    "description": "Approves the current draft of an email.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "cloneEmailUsingPOST",
    "title": "cloneEmailUsingPOST",
    "description": "Clones the target email. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "cloneEmailRequest": {
          "$ref": "#/definitions/CloneEmailRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "cloneEmailRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getEmailContentByIdUsingGET",
    "title": "getEmailContentByIdUsingGET",
    "description": "Returns the content of the designated email.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateEmailContentUsingPOST",
    "title": "updateEmailContentUsingPOST",
    "description": "Updates the content of an email.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateEmailRequest": {
          "$ref": "#/definitions/UpdateEmailComponentDataRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateEmailRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "rearrangeModulesUsingPOST",
    "title": "rearrangeModulesUsingPOST",
    "description": "Rearranges the modules in an email",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "positions": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ModelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateEmailComponentContentUsingPOST",
    "title": "updateEmailComponentContentUsingPOST",
    "description": "Updates the content in the given section.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "htmlId": {
          "type": "string",
          "description": "htmlId"
        },
        "request": {
          "$ref": "#/definitions/UpdateEmailComponentContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "htmlId", "request"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "addModuleUsingPOST",
    "title": "addModuleUsingPOST",
    "description": "Adds a new module to an email, with the given id.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "moduleId": {
          "type": "string",
          "description": "moduleId"
        },
        "name": {
          "type": "string",
          "description": "Name of the module"
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "description": "Index of the module.  Determines the order of the module in the email."
        }
      },
      "additionalProperties": false,
      "required": ["id", "moduleId", "name", "index"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ModelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteModuleUsingPOST",
    "title": "deleteModuleUsingPOST",
    "description": "Deletes the given module from the email.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "moduleId": {
          "type": "string",
          "description": "moduleId"
        }
      },
      "additionalProperties": false,
      "required": ["id", "moduleId"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ModelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "duplicateModuleUsingPOST",
    "title": "duplicateModuleUsingPOST",
    "description": "Creates a copy of the designated module in an email.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "moduleId": {
          "type": "string",
          "description": "moduleId"
        },
        "name": {
          "type": "string",
          "description": "Name of the new module"
        }
      },
      "additionalProperties": false,
      "required": ["id", "moduleId", "name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ModelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "renameUsingPOST",
    "title": "renameUsingPOST",
    "description": "Renames a module.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "moduleId": {
          "type": "string",
          "description": "moduleId"
        },
        "name": {
          "type": "string",
          "description": "New module name"
        }
      },
      "additionalProperties": false,
      "required": ["id", "moduleId", "name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ModelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteEmailUsingPOST",
    "title": "deleteEmailUsingPOST",
    "description": "Deletes the target email.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "discardDraftUsingPOST",
    "title": "discardDraftUsingPOST",
    "description": "Discards the current draft of an email.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getEmailDynamicContentUsingGET",
    "title": "getEmailDynamicContentUsingGET",
    "description": "Retrieves the dyanmic content record for the given section.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of email"
        },
        "contentId": {
          "type": "string",
          "description": "Id of email dynamic content section"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id", "contentId"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailDynamicContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateEmailDynamicContentUsingPOST",
    "title": "updateEmailDynamicContentUsingPOST",
    "description": "Updates dynamic content in the given section.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of email"
        },
        "contentId": {
          "type": "string",
          "description": "Id of email dynamic content section"
        },
        "request": {
          "$ref": "#/definitions/UpdateEmailDynamicContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "contentId", "request"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "sendSampleEmailUsingPOST",
    "title": "sendSampleEmailUsingPOST",
    "description": "Sends a sample email to the given email address.  Leads may be impersonated to populate data for tokens and dynamic content. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the email"
        },
        "sendSampleEmailRequest": {
          "$ref": "#/definitions/SendSampleEmailRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "sendSampleEmailRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfobject"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "unapproveDraftUsingPOST",
    "title": "unapproveDraftUsingPOST",
    "description": "Unapproves the email and reverts it to a draft-only state.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateVariableUsingPOST",
    "title": "updateVariableUsingPOST",
    "description": "Updates the value of a given variable in an email.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "name": {
          "type": "string",
          "description": "name"
        },
        "updateVariableRequest": {
          "$ref": "#/definitions/UpdateVariableRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ModelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getEmailVariablesUsingGET",
    "title": "getEmailVariablesUsingGET",
    "description": "Returns a list of the available variables in an email.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ModelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getTemplateByNameUsingGET",
    "title": "getTemplateByNameUsingGET",
    "description": "Retrieves and email template record by the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getTemplateByIdUsingGET",
    "title": "getTemplateByIdUsingGET",
    "description": "Returns an email template record by its id. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateEmailTemplateUsingPOST",
    "title": "updateEmailTemplateUsingPOST",
    "description": "Updates the metadata for the designated email template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateEmailMetaDataRequest": {
          "$ref": "#/definitions/UpdateEmailTemplateMetaDataRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateEmailMetaDataRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "approveDraftUsingPOST_1",
    "title": "approveDraftUsingPOST_1",
    "description": "Approves the current draft of the email template.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "cloneTemplateUsingPOST",
    "title": "cloneTemplateUsingPOST",
    "description": "Clones the designated email template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "cloneEmailTemplateRequest": {
          "$ref": "#/definitions/CloneEmailTemplateRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "cloneEmailTemplateRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getTemplateContentByIdUsingGET",
    "title": "getTemplateContentByIdUsingGET",
    "description": "Returns the content for a given email template.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateEmailTemplateContentUsingPOST",
    "title": "updateEmailTemplateContentUsingPOST",
    "description": "Updates the content of the given email template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateEmailTemplateContentRequest": {
          "$ref": "#/definitions/UpdateEmailTemplateContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteTemplateUsingPOST",
    "title": "deleteTemplateUsingPOST",
    "description": "Deletes the designated email template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "discardDraftUsingPOST_1",
    "title": "discardDraftUsingPOST_1",
    "description": "Discards the current draft of the email template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "unapproveDraftUsingPOST_1",
    "title": "unapproveDraftUsingPOST_1",
    "description": "Unapproves the current approved version of the Email Template.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getEmailTemplatesUsingGET",
    "title": "getEmailTemplatesUsingGET",
    "description": "Returns a list of email template records accessible in the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createEmailTemplateUsingPOST",
    "title": "createEmailTemplateUsingPOST",
    "description": "Creates a new email template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createEmailTemplateRequest": {
          "$ref": "#/definitions/CreateEmailTemplateRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createEmailTemplateRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getEmailUsingGET",
    "title": "getEmailUsingGET",
    "description": "Returns a list of emails matching the given filter parameters.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "folder": {
          "type": "string",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20."
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createEmailUsingPOST",
    "title": "createEmailUsingPOST",
    "description": "Creates a new email asset.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createEmailRequest": {
          "$ref": "#/definitions/CreateEmailRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createEmailRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfEmailResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getEmailFullContentUsingGET",
    "title": "getEmailFullContentUsingGET",
    "description": "Returns the serialized HTML version of the email.  Required Permissions: Read-Only Assets, Read-Write Assets.  If leadId is passed in the request: Read-Only Lead, Read-Write Lead.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the email"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions.  Defaults to approved if asset is approved, draft if not.",
          "enum": ["approved", "draft"]
        },
        "leadId": {
          "type": "integer",
          "format": "int32",
          "description": "The lead id to impersonate.  Email is rendered as though it was received by this lead."
        },
        "type": {
          "type": "string",
          "description": "Email content type to return.  Default is HTML.",
          "enum": ["Text", "HTML"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfGetEmailFullContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createEmailFullContentUsingPOST",
    "title": "createEmailFullContentUsingPOST",
    "description": "Replaces the HTML of an Email that has had its relationship broken from its template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "updateEmailFullContentRequest": {
          "$ref": "#/definitions/UpdateEmailFullContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["updateEmailFullContentRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfUpdateEmailFullContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getFileByNameUsingGET",
    "title": "getFileByNameUsingGET",
    "description": "Returns files records for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the file"
        }
      },
      "additionalProperties": false,
      "required": ["name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFileResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getFileByIdUsingGET",
    "title": "getFileByIdUsingGET",
    "description": "Returns the file record for the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id for file in database"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFileResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateContentUsingPOST",
    "title": "updateContentUsingPOST",
    "description": "Replaces the current content of the file with the included payload.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id for file in database"
        },
        "request": {
          "$ref": "#/definitions/UpdateFileContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "request"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFileResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getFilesUsingGET",
    "title": "getFilesUsingGET",
    "description": "Returns the files from the given folder. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "getFilesRequest": {
          "$ref": "#/definitions/GetFilesRequest"
        },
        "folder": {
          "type": "string",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        }
      },
      "additionalProperties": false,
      "required": ["getFilesRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFileResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createFileUsingPOST",
    "title": "createFileUsingPOST",
    "description": "Creates a new file from the included payload. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createFileRequest": {
          "$ref": "#/definitions/CreateFileRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createFileRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFileResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getFolderByNameUsingGET",
    "title": "getFolderByNameUsingGET",
    "description": "Returns a folder record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the folder.  Not applicable for Programs"
        },
        "type": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'"
        },
        "root": {
          "type": "string",
          "description": "Parent folder reference"
        },
        "workSpace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFolderResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getFolderByIdUsingGET",
    "title": "getFolderByIdUsingGET",
    "description": "Returns the folder record with the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "type": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Folder", "Program"],
          "default": "Folder"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFolderResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateFolderUsingPOST",
    "title": "updateFolderUsingPOST",
    "description": "Updates the metadata for a given folder.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateFolderRequest": {
          "$ref": "#/definitions/UpdateFolderRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateFolderRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFolderResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getFolderContentUsingGET",
    "title": "getFolderContentUsingGET",
    "description": "Returns records for the contents of a given folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offSet": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "type": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Folder", "Program"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFolderContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteFolderUsingPOST",
    "title": "deleteFolderUsingPOST",
    "description": "Deletes the designated folder.  Deletion will fail if the folder has content.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "type": {
          "type": "string",
          "description": "type",
          "enum": ["Program", "Folder"],
          "default": "Folder"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getTokensByFolderIdUsingGET",
    "title": "getTokensByFolderIdUsingGET",
    "description": "Retrieves the list of available My Tokens in the target folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "folderType": {
          "type": "string",
          "description": "Type of folder.  'Folder' or 'Program'",
          "enum": ["Folder", "Program"],
          "default": "Folder"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfTokenResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "addTokenTOFolderUsingPOST",
    "title": "addTokenTOFolderUsingPOST",
    "description": "Creates a new token in the parent folder.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "createTokenRequest": {
          "$ref": "#/definitions/CreateTokenRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "createTokenRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfTokenResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteTokenByNameUsingPOST",
    "title": "deleteTokenByNameUsingPOST",
    "description": "Deletes a token with the given name from the parent folder.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "deleteTokenRequest": {
          "$ref": "#/definitions/DeleteTokenRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "deleteTokenRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getFolderUsingGET",
    "title": "getFolderUsingGET",
    "description": "Retrieves child folders from within a given root folder.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "root": {
          "type": "string",
          "description": "Parent folder reference"
        },
        "maxDepth": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum folder depth to traverse, Default 2"
        },
        "workSpace": {
          "type": "string",
          "description": "Name of the workspace"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFolderResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createFolderUsingPOST",
    "title": "createFolderUsingPOST",
    "description": "Creates a new folder.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createFolderRequest": {
          "$ref": "#/definitions/CreateFolderRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createFolderRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFolderResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLpFormByNameUsingGET",
    "title": "getLpFormByNameUsingGET",
    "description": "Retrieves a form record by its name. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the form"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "folder": {
          "type": "string",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        }
      },
      "additionalProperties": false,
      "required": ["name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getAllFieldsUsingGET",
    "title": "getAllFieldsUsingGET",
    "description": "Retrieves a list of all valids fields for use in forms. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFieldsMetaDataResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "addFormFieldVisibilityRuleUsingPOST",
    "title": "addFormFieldVisibilityRuleUsingPOST",
    "description": "Adds a visibility rule to the target form field.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "formId": {
          "type": "integer",
          "format": "int32",
          "description": "formId"
        },
        "fieldId": {
          "type": "string",
          "description": "fieldId"
        },
        "addFormFieldVisibilityRequest": {
          "$ref": "#/definitions/AddFormFieldVisibilityRequest"
        }
      },
      "additionalProperties": false,
      "required": ["formId", "fieldId", "addFormFieldVisibilityRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfFormVisibilityRuleResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLpFormByIdUsingGET",
    "title": "getLpFormByIdUsingGET",
    "description": "Retrieves a form record by its id. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateFormsUsingPOST",
    "title": "updateFormsUsingPOST",
    "description": "Updates the metadata of the target form.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateFormMetaDataRequest": {
          "$ref": "#/definitions/UpdateFormMetaDataRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateFormMetaDataRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "approveFromUsingPOST",
    "title": "approveFromUsingPOST",
    "description": "Approves the current draft of the form.  This will delete the current approved version of the form.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "cloneLpFormsUsingPOST",
    "title": "cloneLpFormsUsingPOST",
    "description": "Clones the target form.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "cloneFormRequest": {
          "$ref": "#/definitions/CloneFormRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteFormByIdUsingPOST",
    "title": "deleteFormByIdUsingPOST",
    "description": "Deletes the target form.  Forms which are in use by landing pages may not be deleted until they are removed from all landing pages.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "discardFormByIdUsingPOST",
    "title": "discardFormByIdUsingPOST",
    "description": "Discards the current draft of the form.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateFormFieldUsingPOST",
    "title": "updateFormFieldUsingPOST",
    "description": "Updates the configuration for that target field. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "fieldId": {
          "type": "string",
          "description": "fieldId"
        },
        "updateFormFieldRequest": {
          "$ref": "#/definitions/UpdateFormFieldRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "fieldId", "updateFormFieldRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteFormFieldUsingPOST",
    "title": "deleteFormFieldUsingPOST",
    "description": "Deletes a field from a form. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "fieldId": {
          "type": "string",
          "description": "fieldId"
        }
      },
      "additionalProperties": false,
      "required": ["id", "fieldId"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "addFieldSetUsingPOST",
    "title": "addFieldSetUsingPOST",
    "description": "Adds a field set to the target form.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "addFormFieldSetRequest": {
          "$ref": "#/definitions/AddFormFieldSetRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "addFormFieldSetRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteFormFieldFromFieldSetUsingPOST",
    "title": "deleteFormFieldFromFieldSetUsingPOST",
    "description": "Removes the target field from the fieldset. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "fieldSetId": {
          "type": "string",
          "description": "fieldSetId"
        },
        "fieldId": {
          "type": "string",
          "description": "fieldId"
        }
      },
      "additionalProperties": false,
      "required": ["id", "fieldSetId", "fieldId"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getFormFieldByFormVidUsingGET",
    "title": "getFormFieldByFormVidUsingGET",
    "description": "Retrieves the list of fields in the target form.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "addFieldToAFormUsingPOST",
    "title": "addFieldToAFormUsingPOST",
    "description": "Adds a field to a form. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "addFormFieldSetRequest": {
          "$ref": "#/definitions/AddFormFieldRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "addFormFieldSetRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateFieldPositionsUsingPOST",
    "title": "updateFieldPositionsUsingPOST",
    "description": "Reorders the list of fields in a form. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "reArrangeRequest": {
          "$ref": "#/definitions/ReArrangeRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "addRichTextFieldUsingPOST",
    "title": "addRichTextFieldUsingPOST",
    "description": "Adds a rich-text type field to the form.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "addRichTextRequest": {
          "$ref": "#/definitions/AddRichTextRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "addRichTextRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormFieldResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateFormSubmitButtonUsingPOST",
    "title": "updateFormSubmitButtonUsingPOST",
    "description": "Updates the submit button configuration for the target form.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "submitButtonRequest": {
          "$ref": "#/definitions/SubmitButtonRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "submitButtonRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getThankYouPageByIdUsingGET",
    "title": "getThankYouPageByIdUsingGET",
    "description": "Returns the thank you page configuration for a given form.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfThankYouPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateThankYouPageByIdUsingPOST",
    "title": "updateThankYouPageByIdUsingPOST",
    "description": "Updates the thank you page configuration for a given form.  This update is destructive and the resulting draft will not have any memory of the previous configuration.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "thankYouPageRequest": {
          "$ref": "#/definitions/UpdateThankYouPageRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "thankYouPageRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfThankYouPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "browseForms2UsingGET",
    "title": "browseForms2UsingGET",
    "description": "Retrieves a list of accessible form records from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "folder": {
          "type": "string",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        },
        "maxReturn": {
          "type": "string",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "string",
          "description": "Integer offset for paging"
        }
      },
      "additionalProperties": false,
      "required": ["folder"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createLpFormsUsingPOST",
    "title": "createLpFormsUsingPOST",
    "description": "Creates a new form.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createFormRequest": {
          "$ref": "#/definitions/CreateLpFormRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createFormRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpFormResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLandingPageByNameUsingGET",
    "title": "getLandingPageByNameUsingGET",
    "description": "Returns the landing page record for the given name. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the landing page"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        }
      },
      "additionalProperties": false,
      "required": ["name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLandingPageByIdUsingGET",
    "title": "getLandingPageByIdUsingGET",
    "description": "Returns the landning record for the given id. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateLandingPageUsingPOST",
    "title": "updateLandingPageUsingPOST",
    "description": "Updates the metadata for the targe landing page.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateLandingPageRequest": {
          "$ref": "#/definitions/UpdateLandingPageRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateLandingPageRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "approveLandingPageUsingPOST",
    "title": "approveLandingPageUsingPOST",
    "description": "Approves the current draft of the landing page.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "cloneLandingPageUsingPOST",
    "title": "cloneLandingPageUsingPOST",
    "description": "Clones the target landing page. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "cloneLandingPageRequest": {
          "$ref": "#/definitions/CloneLandingPageRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "cloneLandingPageRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLandingPageContentUsingGET",
    "title": "getLandingPageContentUsingGET",
    "description": "Retrieves the list of content sections in the target landing page.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "addLandingPageContentUsingPOST",
    "title": "addLandingPageContentUsingPOST",
    "description": "Adds a content section to the target landing page. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "request": {
          "$ref": "#/definitions/CreateLandingPageContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "request"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateLandingPageContentUsingPOST",
    "title": "updateLandingPageContentUsingPOST",
    "description": "Updates a content section the landing page. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of landing page"
        },
        "contentId": {
          "type": "string",
          "description": "Id of landing page content section"
        },
        "request": {
          "$ref": "#/definitions/UpdateLandingPageContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "contentId", "request"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "removeLandingPageContentUsingPOST",
    "title": "removeLandingPageContentUsingPOST",
    "description": "Removes the target content section from the parent landing page. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of landing page"
        },
        "contentId": {
          "type": "string",
          "description": "Id of landing page content section"
        }
      },
      "additionalProperties": false,
      "required": ["id", "contentId"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteLandingPageByIdUsingPOST",
    "title": "deleteLandingPageByIdUsingPOST",
    "description": "Deletes the target landing page. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "discardLandingPageByIdUsingPOST",
    "title": "discardLandingPageByIdUsingPOST",
    "description": "Discards the current draft of the landing page. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLandingPageDynamicContentsUsingGET",
    "title": "getLandingPageDynamicContentsUsingGET",
    "description": "Retrieves the dynamic content from the target section. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of landing page"
        },
        "contentId": {
          "type": "string",
          "description": "Id of landing page dynamic content section"
        }
      },
      "additionalProperties": false,
      "required": ["id", "contentId"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageDynamicContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateLandingPageDynamicContentUsingPOST",
    "title": "updateLandingPageDynamicContentUsingPOST",
    "description": "Updates the content of the target dynamic content section. Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the landing page"
        },
        "contentId": {
          "type": "string",
          "description": "Id of the landing page dynamic content"
        },
        "request": {
          "$ref": "#/definitions/UpdateLandingPageDynamicContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "contentId"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "unapproveLandingPageByIdUsingPOST",
    "title": "unapproveLandingPageByIdUsingPOST",
    "description": "Unapproves the landing page, reverting it to a draft-only state. Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateLandingPageVariableUsingPOST",
    "title": "updateLandingPageVariableUsingPOST",
    "description": "Updates the value of the given variable.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "variableId": {
          "type": "string",
          "description": "variableId"
        },
        "value": {
          "type": "integer",
          "format": "int32",
          "description": "New value of the variable"
        }
      },
      "additionalProperties": false,
      "required": ["id", "variableId", "value"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageVariableResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getVariablesUsingGET",
    "title": "getVariablesUsingGET",
    "description": "Get Landing Page Variables",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the landing page"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageVariableResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLandingPageTemplateByNameUsingGET",
    "title": "getLandingPageTemplateByNameUsingGET",
    "description": "Retrieves the landing page template record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the landing page template"
        }
      },
      "additionalProperties": false,
      "required": ["name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLandingPageTemplateByIdUsingGET",
    "title": "getLandingPageTemplateByIdUsingGET",
    "description": "Retrieves the record for the target landing page template.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateLpTemplateUsingPOST",
    "title": "updateLpTemplateUsingPOST",
    "description": "Updates the metadata for the target landing page template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateLpTemplateRequest": {
          "$ref": "#/definitions/UpdateLpTemplateRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateLpTemplateRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "approveLandingPageTemplateUsingPOST",
    "title": "approveLandingPageTemplateUsingPOST",
    "description": "Approves the current landing page template draft.  This will delete the current approved version of the template if there is one.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "cloneLpTemplateUsingPOST",
    "title": "cloneLpTemplateUsingPOST",
    "description": "Clones the target landing page template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "cloneLpTemplateRequest": {
          "$ref": "#/definitions/CloneLpTemplateRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "cloneLpTemplateRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateLandingPageTemplateContentUsingPOST",
    "title": "updateLandingPageTemplateContentUsingPOST",
    "description": "Updates the content for the target landing page template.  This update is destructive for the draft version of the template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "content": {
          "type": "string",
          "description": "content"
        }
      },
      "additionalProperties": false,
      "required": ["id", "content"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLandingPageTemplateContentUsingGET",
    "title": "getLandingPageTemplateContentUsingGET",
    "description": "Retrieves the content of the target landing page.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateGetContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteLpTemplateUsingPOST",
    "title": "deleteLpTemplateUsingPOST",
    "description": "Deletes the target landing page template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "discardDraftUsingPOST_2",
    "title": "discardDraftUsingPOST_2",
    "description": "Discrads the current draft of the landing page template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "unapproveLandingPageTemplateUsingPOST",
    "title": "unapproveLandingPageTemplateUsingPOST",
    "description": "Unapproves the landing page template and reverts it to a draft-only state.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getLandingPageTemplatesUsingGET",
    "title": "getLandingPageTemplatesUsingGET",
    "description": "Retrieves the list of accessible landing page templates from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "folder": {
          "type": "string",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createLpTemplateUsingPOST",
    "title": "createLpTemplateUsingPOST",
    "description": "Creates a new landing page template.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createLpTemplateRequest": {
          "$ref": "#/definitions/CreateLpTemplateRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createLpTemplateRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLpTemplateResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "browseLandingPagesUsingGET",
    "title": "browseLandingPagesUsingGET",
    "description": "Retrieves a list of accessible landing pages from the target instance. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of landing pages to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "folder": {
          "type": "string",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createLandingPageUsingPOST",
    "title": "createLandingPageUsingPOST",
    "description": "Creates a new landing page.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createLandingPageRequest": {
          "$ref": "#/definitions/CreateLandingPageRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createLandingPageRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfLandingPageResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getProgramByNameUsingGET",
    "title": "getProgramByNameUsingGET",
    "description": "Retrieves the program record for the given name.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the program"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfProgramResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getProgramListByTagUsingGET",
    "title": "getProgramListByTagUsingGET",
    "description": "Retrieves a list of programs matching the tag type and tag values given.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "tagType": {
          "type": "string",
          "description": "Type of program tag"
        },
        "tagValue": {
          "type": "string",
          "description": "Value of the tag"
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        }
      },
      "additionalProperties": false,
      "required": ["tagType", "tagValue"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfProgramResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getProgramByIdUsingGET",
    "title": "getProgramByIdUsingGET",
    "description": "Retrieves the program record for the given id.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfProgramResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateProgramUsingPOST",
    "title": "updateProgramUsingPOST",
    "description": "Updates the target program's metadata.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateProgramRequest": {
          "$ref": "#/definitions/UpdateProgramRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateProgramRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfProgramResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "approveProgramUsingPOST",
    "title": "approveProgramUsingPOST",
    "description": "Approves the target program.  Only valid for unapproved email programs.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "cloneProgramUsingPOST",
    "title": "cloneProgramUsingPOST",
    "description": "Clones the target program.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "cloneProgramRequest": {
          "$ref": "#/definitions/CloneProgramRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "cloneProgramRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfProgramResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteProgramUsingPOST",
    "title": "deleteProgramUsingPOST",
    "description": "Deletes the target program.  The program may not contain any assets which are in use outside the program.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "unapproveProgramUsingPOST",
    "title": "unapproveProgramUsingPOST",
    "description": "Unapproves the target program.  Only valid for approved email programs.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "browseProgramsUsingGET",
    "title": "browseProgramsUsingGET",
    "description": "Retrieves the list of accessible programs from the target instance. Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "filterType": {
          "type": "string",
          "description": "Optional filter.  Requires filterValues",
          "enum": ["id", "programId", "folderId", "workspace"]
        },
        "earliestUpdatedAt": {
          "type": "string",
          "description": "Exclude programs prior to this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description."
        },
        "latestUpdatedAt": {
          "type": "string",
          "description": "Exclude programs after this date. Must be valid ISO-8601 string.  See <a href=\"http://developers.marketo.com/rest-api/lead-database/fields/field-types/\">Datetime</a> field type description."
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfBrowseAllPrograms"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createProgramUsingPOST",
    "title": "createProgramUsingPOST",
    "description": "Creates a new program.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createProgramRequest": {
          "$ref": "#/definitions/CreateProgramRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createProgramRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfProgramResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getSegmentationUsingGET",
    "title": "getSegmentationUsingGET",
    "description": "Retrieves a list of accessible segmentations for the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSegmentationResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getSegmentsForSegmentationUsingGET",
    "title": "getSegmentsForSegmentationUsingGET",
    "description": "Retrieves a list of segments inside the target segmentation.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSegmentsResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getSnippetByIdUsingGET",
    "title": "getSnippetByIdUsingGET",
    "description": "Retrieves the target snippet record.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSnippetResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateSnippetUsingPOST",
    "title": "updateSnippetUsingPOST",
    "description": "Updates the metadata of the snippet.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "updateSnippetRequest": {
          "$ref": "#/definitions/UpdateSnippetRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "updateSnippetRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSnippetResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "approveSnippetUsingPOST",
    "title": "approveSnippetUsingPOST",
    "description": "Approves the current draft of the snippet.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSnippetResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "cloneSnippetUsingPOST",
    "title": "cloneSnippetUsingPOST",
    "description": "Clones the target snippet.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "cloneSnippetRequest": {
          "$ref": "#/definitions/CloneSnippetRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSnippetResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getSnippetContentByIdUsingGET",
    "title": "getSnippetContentByIdUsingGET",
    "description": "Retrieves the content of the target snippet.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSnippetContentResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateContentUsingPOST_1",
    "title": "updateContentUsingPOST_1",
    "description": "Updates the content of the target snippet.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "request": {
          "$ref": "#/definitions/UpdateSnippetContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "request"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteSnippetUsingPOST",
    "title": "deleteSnippetUsingPOST",
    "description": "Deletes the target snippet.  The snippet may not be in use by emails or landing pages.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "discardSnippetUsingPOST",
    "title": "discardSnippetUsingPOST",
    "description": "Discards the current draft of the snippet.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getDynamicContentUsingGET",
    "title": "getDynamicContentUsingGET",
    "description": "Gets the list of dynamic content sections for the snippet.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ModelResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "updateDynamicContentUsingPOST",
    "title": "updateDynamicContentUsingPOST",
    "description": "Updates the target dynamic content section.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        },
        "segmentId": {
          "type": "integer",
          "format": "int32",
          "description": "segmentId"
        },
        "request": {
          "$ref": "#/definitions/UpdateSnippetDynamicContentRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "segmentId", "request"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "unapproveSnippetUsingPOST",
    "title": "unapproveSnippetUsingPOST",
    "description": "Unapproves the current version of the snippet.  The snippet may not be in use.  The snippet will be reverted to a draft-only state.  Required Permissions: Approve Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "id"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSnippetResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getSnippetUsingGET",
    "title": "getSnippetUsingGET",
    "description": "Retrieves a list of accessible snippets from the target instance.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "status": {
          "type": "string",
          "description": "Status filter for draft or approved versions",
          "enum": ["approved", "draft"]
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSnippetResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "createSnippetUsingPOST",
    "title": "createSnippetUsingPOST",
    "description": "Creates a new snippet.  Required Permissions: Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "createSnippetRequest": {
          "$ref": "#/definitions/CreateSnippetRequest"
        }
      },
      "additionalProperties": false,
      "required": ["createSnippetRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSnippetResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getTagByNameUsingGET",
    "title": "getTagByNameUsingGET",
    "description": "Retrieves a tag by its name.  This will also return the set of valid values for the tag.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": "object",
      "properties": {
        "getTagByNameRequest": {
          "$ref": "#/definitions/GetTagByNameRequest"
        },
        "name": {
          "type": "string",
          "description": "Name of the tag"
        }
      },
      "additionalProperties": false,
      "required": ["getTagByNameRequest", "name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfTagResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getSmartListByIdUsingGET",
    "title": "getSmartListByIdUsingGET",
    "description": "Retrieves a Smart List record by its id. Required Permissions: Read-Asset or Read-Write Asset",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the smart list to retrieve"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSmartListResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getSmartListByNameUsingGET",
    "title": "getSmartListByNameUsingGET",
    "description": "Retrieves a Smart List record by its name. Required Permissions: Read-Asset or Read-Write Asset",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of smart list to retrieve"
        }
      },
      "additionalProperties": false,
      "required": ["name"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSmartListResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "deleteSmartListByIdUsingPOST",
    "title": "deleteSmartListByIdUsingPOST",
    "description": "Deletes the designated Smart List. Required Permissions: Read-Write Asset",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Id of the smart list to delete"
        }
      },
      "additionalProperties": false,
      "required": ["id"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfIdResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getSmartListsUsingGET",
    "title": "getSmartListsUsingGET",
    "description": "Retrieves a list of Smart List records. Required Permissions: Read-Asset or Read-Write Asset",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "folder": {
          "type": "string",
          "description": "JSON representation of parent folder, with members 'id', and 'type' which may be 'Folder' or 'Program'"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        },
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of smart lists to return.  Max 200, default 20."
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSmartListResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "cloneSmartListUsingPOST",
    "title": "cloneSmartListUsingPOST",
    "description": "Clones the designated Smart List. Required Permissions: Read-Write Asset",
    "inputSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of smart list to clone"
        },
        "cloneSmartListRequest": {
          "$ref": "#/definitions/CloneSmartListRequest"
        }
      },
      "additionalProperties": false,
      "required": ["id", "cloneSmartListRequest"]
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfSmartListResponse"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }, {
    "id": "getTagTypesUsingGET",
    "title": "getTagTypesUsingGET",
    "description": "Retrieves a list of available tag types.  Required Permissions: Read-Only Assets, Read-Write Assets",
    "inputSchema": {
      "type": ["object", "null"],
      "properties": {
        "maxReturn": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of channels to return.  Max 200, default 20"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Integer offset for paging"
        }
      },
      "additionalProperties": false
    },
    "outputSchema": {
      "$ref": "#/definitions/ResponseOfTagResponseGetAll"
    },
    "security": {
      "marketoRestAPI": {
        "integration": "marketoRestAPI"
      }
    }
  }]
}